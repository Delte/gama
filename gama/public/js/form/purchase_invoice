frappe.ui.form.on('Purchase Invoice', {
  supplier(frm, cdt, cdn){
  setTimeout(() => {
  frm.set_value('buying_price_list', 'Standart Satın Alma');
  refresh_field('buying_price_list');
},1500);
},
   onload(frm,  cdt, cdn){
		if(frappe.user.has_role('Shipment User')){
      if(!frappe.user.has_role('System Manager')){
			cur_frm.set_df_property('bill_no','hidden',1);
			cur_frm.set_df_property('bill_date','hidden',1);
			frm.set_value('bill_no', '1111Gecici1111');
			frm.set_value('bill_date', frappe.datetime.get_today());
    }
			}
			else if(frappe.user.has_role('Shipment & Installation Manager')){
				if(frm.doc.bill_no=='1111Gecici1111'){
					frm.set_value('bill_no', '');
					frm.set_value('bill_date', '');
					frm.set_df_property("bill_date", "reqd", 1);
					frm.set_df_property("bill_no", "reqd", 1);
				}
			}
      else  if(frappe.user.has_role('Shipment & Installation Manager') || frappe.user.has_role('Shipment User')){
    		setTimeout(() => {
    		frm.remove_custom_button('Purchase Receipt','Create');
    		frm.remove_custom_button('Quality Inspection(s)','Create');
    		frm.remove_custom_button('Payment Request','Create');
    		},50);
    		}


	},
	refresh(frm,  cdt, cdn){
	if ((frm.doc.docstatus == 0) && (frappe.user.has_role('Purchase User') || frappe.user.has_role('Purchase Manager') || frappe.user.has_role('System Manager')) && !frm.doc.custom_drive_entity)
		{
	    frm.add_custom_button(__("Create Folder"), function() {
    frappe.call({
          method: "gama.api.drive.utils.create",
          args: {
              doc_type: frm.doctype,
              name: frm.doc.name
              },
              callback: function (data){
              frm.set_value('custom_drive_entity', data.message);
              refresh_field(frm.doc.drive_entity);
              frm.save();
              },
          });

        });	    
		}
		if (frm.doc.custom_drive_entity){
      frm.add_custom_button(__("Drive"), function() {
      window.open(origin+'/drive/folder/'+frm.doc.custom_drive_entity);
    });
	}
    
	    
	    
	    
	    
	    
	 if(frappe.user.has_role('Shipment & Installation Manager') || frappe.user.has_role('Shipment User')){
			setTimeout(() => {
		frm.remove_custom_button('Purchase Receipt','Create');
		frm.remove_custom_button('Quality Inspection(s)','Create');
		frm.remove_custom_button('Payment Request','Create');
			},50);
		}

	},
  buying_price_list(frm, cdt, cdn){
      cur_frm.cscript.fetch_rate(frm, cdt, cdn);
  },
  plc_conversion_rate(frm, cdt, cdn){
      cur_frm.cscript.fetch_rate(frm, cdt, cdn);
  },
	before_save(frm,  cdt, cdn){
		if(frappe.user.has_role('Purchase Invoice')){
          if(!frappe.user.has_role('System Manager')){
			  var row = locals[cdt][cdn];
				cur_frm.doc.items.forEach(function(row){
				if(!row.project){
				msgprint(row.item_code + " Ürünün Proje Kodunu Giriniz");
			    frappe.validated = false;
				}
				});
        }
			}
	}

});

frappe.ui.form.on('Purchase Invoice Item', {
  item_code(frm, cdt, cdn){
      var row = locals[cdt][cdn];

			frappe.call({
			 method: 'frappe.client.get_value',
				args:{
					doctype:'Item',
					filters:{
						item_code:row.item_code
					},
					fieldname:['purchase_uom']
				},
				callback:function (data) {
						  frappe.model.set_value(row.doctype, row.name, 'purchase_uom', data.message.purchase_uom);
				}
			});
          cur_frm.cscript.fetch_rate(frm, cdt, cdn);
    },
discount_percentage(frm, cdt, cdn){
    var row = locals[cdt][cdn];

    if(row.discount_percentage > 0)
    {
        cur_frm.cscript.caluclate(frm, cdt, cdn);
    }
        frappe.model.set_value(row.doctype, row.name, 'price_list_rate', row.price_list_rate_new);
          cur_frm.refresh_field(row.price_list_rate);
  },
  discount_amount_new(frm, cdt, cdn){
    var row = locals[cdt][cdn];
    frappe.model.set_value(row.doctype, row.name, 'discount_percentage', 0);
    cur_frm.refresh_field(row.discount_percentage);
    cur_frm.cscript.caluclate2(frm, cdt, cdn);
  },

price_list_rate_new(frm,  cdt, cdn){
        cur_frm.cscript.caluclate_amount(frm, cdt, cdn);
},
purchase_quantity(frm,  cdt, cdn){
        cur_frm.cscript.caluclate_amount(frm, cdt, cdn);
        cur_frm.cscript.calculate_conversion(frm, cdt, cdn);
        cur_frm.cscript.caluclate_discount(frm, cdt, cdn);
},

});

cur_frm.cscript.caluclate_discount = function(frm, cdt, cdn){
var row = locals[cdt][cdn];
var calculate_rate=0;
var percentage=0;

	percentage = ((row.price_list_rate_new * row.discount_percentage)/100);
	calculate_rate = (row.price_list_rate_new - percentage);
	frappe.model.set_value(row.doctype, row.name, 'rate_new', calculate_rate);
	frappe.model.set_value(row.doctype, row.name, 'discount_amount_new', percentage);
	cur_frm.refresh_field(row.rate_new);
	cur_frm.refresh_field(row.discount_amount_new);

};

cur_frm.cscript.caluclate_amount = function(frm, cdt, cdn){
var row = locals[cdt][cdn];
var price_list_value=0;
var rate_new_value=0;

  cur_frm.cscript.calculate_conversion(frm, cdt, cdn);
	price_list_value = (row.price_list_rate_new / row.purchase_conversion_factor);
	frappe.model.set_value(row.doctype, row.name, 'price_list_rate', price_list_value);
  rate_new_value = (row.price_list_rate_new - row.discount_amount_new);
  frappe.model.set_value(row.doctype, row.name, 'rate_new', rate_new_value);
	cur_frm.refresh_field(row.price_list_rate);
  cur_frm.refresh_field(row.rate_new);

};

cur_frm.cscript.calculate_conversion = function(frm, cdt, cdn){
var row = locals[cdt][cdn];
cur_frm.doc.items.forEach(function(row) {
  refresh_field('purchase_conversion_factor');
	frappe.model.set_value(row.doctype, row.name, 'purchase_conversion_factor',(row.received_qty / row.purchase_quantity));
  refresh_field('purchase_conversion_factor');
	});
};


cur_frm.cscript.caluclate2 = function(frm, cdt, cdn){
  var row = locals[cdt][cdn];
  var rate_new_value=0;
  row.price_list_rate = ((row.price_list_rate_new - row.discount_amount_new) / row.purchase_conversion_factor);
  cur_frm.refresh_field(row.price_list_rate);
  rate_new_value = (row.price_list_rate_new - row.discount_amount_new);
  frappe.model.set_value(row.doctype, row.name, 'rate_new', rate_new_value);
  cur_frm.refresh_field(row.rate_new);
};

cur_frm.cscript.caluclate = function(frm, cdt, cdn){
  var row = locals[cdt][cdn];
  var calculate_price_list=0;
  var rate_new_value=0;
    calculate_price_list = ((row.price_list_rate_new - row.discount_amount_new) / row.purchase_conversion_factor);
    frappe.model.set_value(row.doctype, row.name, 'price_list_rate', calculate_price_list);
    cur_frm.refresh_field(row.price_list_rate);
    row.discount_amount_new = ((row.price_list_rate_new * row.discount_percentage)/100);
    rate_new_value = (row.price_list_rate_new - row.discount_amount_new);
    frappe.model.set_value(row.doctype, row.name, 'rate_new', rate_new_value);
    cur_frm.refresh_field(row.rate_new);
    cur_frm.refresh_field(row.discount_amount_new);
};

cur_frm.cscript.fetch_rate = function(frm, cdt, cdn){
  var row = locals[cdt][cdn];
        setTimeout(() => {
            frappe.call({
              method: 'frappe.client.get_value',
              args: {
                doctype: 'Item Price',
                filters: {
                  'item_code': row.item_code,
                  'price_list': frm.doc.buying_price_list,
                },
                fieldname: ['price_list_rate']
              },
              callback: function (data) {
                frappe.model.set_value(row.doctype, row.name, 'price_list_rate_new', data.message.price_list_rate);
                frm.refresh_field('price_list_rate_new');
              }
            });
  },150);
};
